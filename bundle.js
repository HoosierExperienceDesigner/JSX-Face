(function (React$1, ReactDOM, d3) {
  'use strict';

  React$1 = React$1 && Object.prototype.hasOwnProperty.call(React$1, 'default') ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const BackgroundCircle = ({radius, strokeWidth}) => (
    React.createElement( 'circle', {
            r: radius, fill: "#f7c7fc", stroke: "black", 'stroke-width': strokeWidth }) 
  );

  const Eyes =({eyeOffsetX, eyeOffsetY, eyeRadius}) => (
  //React Fragments <> </> - <g></g> would also work to group the eyes 
    React.createElement( React.Fragment, null,
    React.createElement( 'circle', {
      cx: -eyeOffsetX, cy: -eyeOffsetY, r: eyeRadius }),
    React.createElement( 'circle', {
      cx: eyeOffsetX, cy: -eyeOffsetY, r: eyeRadius })
    )
  );

  const Mouth =({mouthRadius, mouthWidth}) => {
    const mouthArc = d3.arc()
  	.innerRadius(mouthRadius)
  	.outerRadius(15 + mouthWidth)
  	.startAngle(Math.PI/2)
  	.endAngle(Math.PI*3/2);
    return (React.createElement( 'path', { d: mouthArc() }));
    };

  const Hat =({hatWidth, hatHeight, eyeOffsetX, eyeOffsetY}) => (
    React.createElement( React.Fragment, null,
    React.createElement( 'rect', { 
      width: hatWidth, height: hatHeight, x: -eyeOffsetX, y: -eyeOffsetY*3, fill: "black" }),
     React.createElement( 'rect', {
      width: hatWidth*2, height: hatHeight/3, x: -eyeOffsetX*2, y: -hatHeight, fill: "black" })
  	)

    );

  const FaceContainer = ({children, width, height, centerX, centerY}) => (
  		React.createElement( 'svg', { width: width, height: height },
      React.createElement( 'g', { transform: `translate(${centerX},${centerY})` },
        children
      )
      )
  );

  const Face = ({
    width, 
    height, 
    centerX, 
    centerY, 
    strokeWidth, 
    strokeHeight, 
    hatWidth, 
    hatHeight, 
    eyeOffsetX, 
    eyeOffsetY, 
    eyeRadius,
    mouthRadius,
    mouthWidth
  }) => (
    React.createElement( FaceContainer, {
      width: width, height: height, centerX: centerX, centerY: centerY },
    React.createElement( BackgroundCircle, { 
      radius: centerX/2 - strokeWidth / 1.5, strokeWidth: strokeWidth }),
    React.createElement( Eyes, { 
      eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY, eyeRadius: eyeRadius }),
    React.createElement( Mouth, { 
      mouthRadius: mouthRadius, mouthWidth: mouthWidth }),
    React.createElement( Hat, {
      hatWidth: hatWidth, hatHeight: hatHeight, eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY })

    )
  );

  const width = 200;
  const height = 200;
  const eyeOffsetX = 35;
  const eyeOffsetY = 35;

  const array=d3.range(10);
         
  const App = () => array.map(()=>(
    React$1.createElement( Face, { 
       width: width, height: height, centerX: width/2, centerY: height/2, strokeWidth: 5 + Math.random()*5, eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY, eyeRadius: 10 + Math.random()*10, mouthWidth: 10 + Math.random()*10, mouthRadius: 0, hatWidth: eyeOffsetX + eyeOffsetY, hatHeight: height/3 })
  	));

  const rootElement = document.getElementById("root");
  ReactDOM.render(React$1.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,